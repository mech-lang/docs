Learn Mech in Five Minutes
============================

-- comment

But plaintext outside of comments is possible. Say hello:

"Hello World"

Define a variable. Identifiers can have dashes and slashes:

my-var := 1234

Specify a kind:

my-var/64-bit<u64> := 1234

Data structures:

`A := 
vector := [1 1 2 3]
matrix := [1 2; 3 4]
tuple := (123.456, true)
tagged-tuple := `Tag(123.456, true)
set := {1 2 3}
map := {"a":1, "b": 2}
record := {a:1, b: 2}
table := {x<f32> y<string> | 1.2, "Hello" ; 1.3, "World"}

Define a kind:

<vec3> := <[f32]:1,3>
<user-id> := <u64>
<hashed-password> := <u64>
<login-token> := <(user-id,hashed-password)>
<user-db> := <{login-token:u64}>

Define a function:

foo(x<u8>, y<u8>) -> z<u8> :=
    x2 := x + 1
    y2 := y + 2
    z := x2 + y2.

Call a function:

foo(1,2)
foo(x: 1, y: 2)


Define a state machine!

First the spec:

#bubble-sort(arr) -> arr := 
    │ Start(arr,ix)
    │ Comparison(arr,ix) 
    │ Check(arr,ix)
    └ Done(arr).

Then the implementation:

#bubble-sort(arr) => Start(arr)
  Start(arr, swaps) => Comparison(arr, swaps)
  Comparison([], swaps) => Check(arr, swaps)
  Comparison([a, b, tail], swaps)
      │ a > b => Comparison([b, a, tail], swaps + 1)
      └ * => Comparison([tail], swaps)
  Check(arr, 0) => Done(arr)
  Check(arr, swaps) => Comparison(arr,0)
  Done(arr) -> arr.