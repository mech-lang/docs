Statements
============

1. Define
----------

The define statement in Mech is used to create a new variable and assign a value to it. It can be used to create both local and global variables. The syntax for the define statement is:

  x = y

This creates a new variable x and assigns it the value of `y`. The variable `x` can now be used anywhere in the code.

By default, all variables in Mech are immutable, which means that their value cannot be changed once assigned. However, because Mech is a dataflow language, variables will automatically update when dependent data changes, effectively allowing them to be modified without explicit assignment.

Here's an example of defining a local variable:

  a = 1
  b = 2
  c = a + b

In this example, we define three variables `a`, `b`, and `c`. The value of c is defined as the sum of a and b.

We can also define global variables, which can be accessed from any part of the program. Here's an example:

  #my-table = [|name      age|
                "Alice"   28
                "Bob"     32
                "Charlie" 45]

This creates a global table called `#my-table`, with two columns name and age. The values in the table can be accessed from any part of the program.

In both examples, the variables are immutable by default, but they will update automatically if their dependent data changes.

Overall, the define statement is a powerful tool in Mech for creating and initializing variables. Whether defining local or global variables, it provides a flexible and intuitive way to work with data in the language.

2. Update
----------

The Update statement in Mech is used to update the values of existing variables. In contrast to the Define statement, Update can only be used to update existing variables, not to create new ones. The syntax for Update is :=, which is similar to the = operator in other programming languages.

In Mech, all variables are immutable by default. However, they can be updated automatically when dependent data changes, thanks to Mech's dataflow feature. The Update statement is one way to manually update variables in Mech.

The Update statement works for both local and global tables. Local tables are declared without the # prefix, while global tables are prepended by #. Here are some examples of using the Update statement in Mech:

Local Table Example:

  #x = 1    -- Define the #x table

Global Table Example:

  #x := 2   -- Update the value of #x to 2


It's important to note that Update statements are not allowed to create new variables, only update existing ones. If you try to update a variable that has not been defined or assigned a value, an error will occur.

Lastly, it's worth noting that the Update statement is commonly used in conjunction with the Define statement. In many cases, variables are first defined, then updated later in the program as needed.

3. Split and Flatten
---------------------

In Mech, it's sometimes necessary to split a vector into a vector-of-vectors, or to join a vector-of-vectors into a flattened vector. Mech supports the following statements for this purpose:

Split

  x >- y 

Flatten 

  x -< y

The split operator (`>-`) takes a vector on the right-hand side and produces a vector-of-vectors on the left-hand side. The resulting vectors are the rows of the original vector. For example:

  x = [1; 2; 3; 4]
  y >- x

The result is that `y = [[1];[2];[3];[4]]`. We can use the split operator to transform a single-column table into a table of tables. For instance, suppose we have a single column of data containing the names of people in a certain office, and we want to group them by their job title. We can do this by splitting the vector of names according to job title:

  names = ["Alice"; "Bob"; "Charlie"; "Dave"]
  jobs = ["Manager"; "Engineer"; "Engineer"; "Intern"]
  employees >- names
  job_list >- jobs
  grouped = [#job employees]
  grouped_by_job >- grouped

The resulting table grouped_by_job will have two rows, one for each job title. Each row will contain a column of employee names.

The flatten statement (`-<`) takes a vector-of-vectors on the right-hand side and produces a single vector on the left-hand side. The resulting vector is a concatenation of the rows of the original vector. For example:

  y = [[1];[2];[3];[4]]
  x -< y

The result is that x = [1; 2; 3; 4]. We can use the flatten operator to transform a table of tables into a single-column table. For instance, suppose we have a table of data representing the attendance of students in various classes, and we want to create a list of all students who attended any class. We can do this by flattening the attendance table:

  attendance = [|class students|
                "101" ["Alice"; "Bob"]
                "102" ["Charlie"; "Dave"; "Eve"]]
  students_attended >- attendance.students
  all_students -< students_attended

The resulting vector all_students will contain the names of all students who attended any class.

4. Temporal Statements
-----------------------
