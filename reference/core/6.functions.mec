Functions
==========

Functions are a powerful feature of the Mech language that allow you to define reusable blocks of code. Mech functions operate similarly to functions in other programming languages, taking arguments and returning results. However, Mech functions are idempotent, meaning that they only operate on their input arguments and do not have access to any global tables. This design choice helps ensure that Mech programs are pure and avoid side effects.

The syntax for defining a Mech function follows a specific pattern, with an output list followed by the function name, input arguments, and function body. Here is an example of a simple function that takes argument and returns the argument plus two:

[x<f32>] = add-two(y<f32>)
  x = y + 2

This function defines one output table `x`, which is specified to be of kind `f32`. The function name is `add-two`, and it takes one input argument y, also a 32-bit floating-point number. The function body simply adds 2 to the input argument y and assigns the result to the output variable x.

Functions can be called in Mech by passing in arguments and assigning the results to variables. For example, to call the add-two function defined above with an input argument of 5 and assign the result to a variable result, you would write:

  result = add-two(y: 5)

In addition to simple arithmetic operations, functions can also perform complex mathematical calculations, such as matrix multiplication or trigonometric functions. Here's an example of a function that uses the math table to calculate the distance between two points:

[d<f32>] = distance(p1<m>, p2<m>)
  dx = p1.x - p2.x
  dy = p1.y - p2.y
  d = math/sqrt(dx^2 + dy^2)

This function takes two input arguments `p1` and `p2`, both of kind m, which represents a point in two-dimensional space. The function calculates the distance between the two points using the Pythagorean theorem and assigns the result to the output variable `d`.

In summary, functions in Mech provide a way to define reusable blocks of code that operate on input arguments and return results. They are idempotent and cannot access global tables, which helps ensure that Mech programs are pure and avoid side effects.