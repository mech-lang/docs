State Machines
================

Concepts
----------

State machines concsist of the following elements:

- state variables - what variable or variablesa are part of the state machine. These are global variables.
- initial state - state variables will either be inititalized before hand, or will assume the value of the firt matched state
- states - All possible states of the state machine variables.
- transitions - the conditions by which the state machine changes to new states
- effects - changes in variables that are not part of the state machine



Uses for state machines
-------------------------

If statements

#x ? 1 => 2
     3 => 4

Create streams

#x = [1 2 3 4]

#x-stream ? #x{1} => #x{2} => ...










- How to accept inputs that controls flow?
  - stream based input

- Several fat arrows that follow

Grammar Exploration
--------------------

#x = [1 0 0] => [1 0 0] => [0 1 0] => [0 0 1] => [1 0 0]

identifier, [" = ", expression], " ? ", {data, [" => "]}, [.]





Followed By:

#x ? 1 => #x + 1
   
This means x starts with 1, and then the value is matched against a wildcard pattern.

A state machine for two traffic lights and two walk signs

Define a color type with three variants.

<color> = `Green | `Red | `Yellow

Define a signal type with three variants.

<signal> = `Walk | `Wait | `Stop

Match the state variables against various possible states, define transitions between states.

(#light/north<color>, #light/east<color>) ?

  -- East light turns green, signal north crosswalk
  (`Yellow, `Red) => 6<s> => (`Red,`Red) => 2<s> => (`Red, `Green) => #crosswalk/north? => (`Red, `Yellow)

  -- North light turns green, signal east crosswalk
  (`Red, `Yellow) => 6<s> => (`Red,`Red) => 2<s> => (`Green, `Red) => #crosswalk/east? => (`Yellow, `Red)

#crosswalk/north ?   
  `Walk => 20<s> => `Wait
  `Wait => 10<s> => `Stop.

#crosswalk/east ?
  `Walk => 20<s> => `Wait
  `Wait => 10<s> => `Stop.

Normalized
------------

(#light/north<color>, #light/east<color>) ?

  -- East light turns green, signal north crosswalk
  (`Yellow, `Red) => 6<s> => (`Red,`Red)
  (`Red,`Red) => 2<s> => (`Red, `Green)
  (`Red, `Green) => #crosswalk/north? => (`Red, `Yellow)

  -- North light turns green, signal east crosswalk
  (`Red, `Yellow) => 6<s> => (`Red,`Red) 
  (`Red,`Red) => 2<s> => (`Green, `Red)
  (`Green, `Red) => #crosswalk/east? => (`Yellow, `Red)

#crosswalk/north ?   
  `Walk => 20<s> => `Wait
  `Wait => 10<s> => `Stop.

#crosswalk/east ?
  `Walk => 20<s> => `Wait
  `Wait => 10<s> => `Stop.


Emojified
------------

<color>  = `🟢 | `🔴 | `🟡
<signal> = `🚶‍♀ | `✋ | `🛑

(#🚦/north<color>, #🚦/east<color>) ?

  -- East light turns green, signal north crosswalk
  (`🟡, `🔴) => 6<s> => (`🔴, `🔴)
  (`🔴, `🔴) => 2<s> => (`🔴, `🟢)
  (`🔴, `🟢) => #crosswalk/north? => (`🔴, `🟡)

  -- North light turns green, signal east crosswalk
  (`🔴, `🟡) => 6<s> => (`🔴, `🔴) 
  (`🔴, `🔴) => 2<s> => (`🟢, `🔴)
  (`🟢, `🔴) => #crosswalk/east? => (`🟡, `🔴)

#crosswalk/north ?   
  `🚶‍♀️ => 20<s> => `✋
  `✋ => 10<s> => `🛑.

#crosswalk/east ?
  `🚶‍♀️ => 20<s> => `✋
  `✋ => 10<s> => `🛑.

Linearized Emojified
----------------------

(#🚦/north<color>, #🚦/east<color>) ?
  (`🟡, `🔴) => 6<s> => (`🔴,`🔴) => 2<s> => (`🔴, `🟢) => 30<s> => (`🔴, `🟡)
  (`🔴, `🟡) => 6<s> => (`🔴,`🔴) => (#crosswalk/north?,#crosswalk/north?) => (`🟢, `🔴) => 30<s> => (`🟡, `🔴)

#crosswalk/north ? `🚶‍♀️ => 20<s> => `✋ => 10<s> => `🛑.
#crosswalk/east ? `🚶‍♀️ => 20<s> => `✋ => 10<s> => `🛑.

