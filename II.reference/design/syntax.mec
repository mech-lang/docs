Design of the Mech Syntax
==========================

One of the first things people notice about Mech is how different the syntax is compared to many popular programming languages. Some elements of the syntax design run counter to conventions expected by many programmers, and these decisions were not made arbitrarily. The design of the syntax has been carefully considered, and this document is meant to document and explain those decisions. That said, it's important to note that Mech is a language in flux, and as more people encounter the language and provide feedback, some of the specific syntax choices may change. 


1. Design Goals
----------------

A. Easy to parse

A language that is easy to parse has several benefits. First, it makes writing parsers easier. At first it may seem like writing a parser for a language is a one-time upfront investment, but actually the parser for Mech has been rewritten several times for various reasons. Also, the official parser may not be the only parser ever implemented, so a choice for making the syntax easy to parse may pay off in the future, even after the official parser has stabilized.

Second, it makes writing tooling easier. For instance, the Mech syntax is context-free, which means that minimal state needs to be maintained in the parser. The implication is that tools like linters and syntax highlithers don't need to be full-fledged parsers to produce useful and accurate support.

Third, easy to parse languages translate to faster parsers. Context-free grammars don't need to do speculative look-ahead searches or maintain symbol tables to resolve ambiguities, which reduces total parse time.

Finally, the easiest to parse languages are unambiguous, which increases overall syntax comprehension. Given any statement in Mech, it's unambiguous as to what it means without having to look at any other statement (that's the essence of a context-free grammar). Again, this has benefits for parser implementation and tooling design.

B. Pretty
C. Not English-centric
D. Explores the syntax design space


2. Grouping Symbols
--------------------

One commonality between all languages is that they all only have so many standard brackets to work with, which places a constraint on the design space. These grouping symbols are: `(), {}, [], <>, , ||`. More operators are available in extended character sets, but these are the only ones available on most keyboards, so Mech has chosen to limit itself to strictly these. Mech uses these grouping symbols as follows:

- `[]` - square brackets - define a table
- `{}` - curly braces - subscript/index/slice a table
- `()` - parentheses - function input arguments, also used to lift the precedence of expression evaluation.
- `<>` - angle brackets - specify a column kind
- `||` - pipes - define a table header

Other topics:

Unicode support
identifiers and operators
sets versus collections and grouping syntax
Whitespace sensitivity in some places
Support of box drawing characters
left to right flow versus right to left
top to bottom flow
mechdown
syntax exposition - how do you introduce the syntax to a learner
scaling from script to full program
lack of keywords
easy parsing
avoiding deep nesting


