Mech Language Specification 
===============================================================================

1. Introduction
-------------------------------------------------------------------------------

This document specifies the default syntax of the Mech programming system, which is designed for developing reactive systems like robots, games, and user interfaces. The syntax specified herein is one of many possible syntaxes and interfaces for Mech, but it may be thought of as the default texual representation of Mech.

This specification starts by defining the most atomic elements of the language, and then builds up to more complex structures.

This document is for:

- Language designers who want to implement a parser for Mech.
- Tool developers who want to build tools that work with Mech code.
- Developers who want to understand the syntax and structure of Mech programs.

2. Notation
-------------------------------------------------------------------------------

The grammar is specified using extended Extended Backus-Naur Form (EBNF):

```
‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ Symbol ‚îÇ Meaning  ‚îÇ Semantics                  ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ  "abc" ‚îÇ terminal ‚îÇ string literal "abc"       ‚îÇ
‚îÇ p1, p2 ‚îÇ sequence ‚îÇ p1 followed by p2          ‚îÇ
‚îÇ p1 | p2‚îÇ choice   ‚îÇ p1 or p2                   ‚îÇ
‚îÇ [p, q] ‚îÇ list     ‚îÇ list of p deliniated by q  ‚îÇ
‚îÇ   *p   ‚îÇ repeat 0 ‚îÇ p for 0 or more times      ‚îÇ
‚îÇ   +p   ‚îÇ repeat 1 ‚îÇ p for 1 or more times      ‚îÇ
‚îÇ   ?p   ‚îÇ optional ‚îÇ p for 0 or 1 time          ‚îÇ
‚îÇ   >p   ‚îÇ peek     ‚îÇ p; do not consume input    ‚îÇ
‚îÇ   ¬¨p   ‚îÇ not      ‚îÇ does not match p           ‚îÇ
‚îÇ  (...) ‚îÇ group    ‚îÇ incrase precedence         ‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ
```

The grammar grammar:

```ebnf
grammar := +rule ;
identifier := alpha-token, *(alpha-token | digit-token | dash) ;
rule := identifier
      , ":="
      , expression
      , ";" ;
expression := term, *( "|", term ) ;
term := factor, *( ",", factor ) ;
definition := identifier ;
repeat0 := "*", factor ;
repeat1 := "+", factor ;
optional := "?", factor ;
peek := ">", factor ;
not := "¬¨", factor ;
list := "[", expression, terminal, "]" ;
factor := repeat0 
      | repeat1 
      | optional 
      | peek 
      | not 
      | list
      | group 
      | definition 
      | terminal ;
group := "(", expression, ")" ;
terminal := quote, +any-token, quote ;
```

3. Source Code Representation
-------------------------------------------------------------------------------

(a) File Format

Mech source code can be stored in files with either the `.mec` or `.ü§ñ` extension. 

Source code is ecoded with UTF-8, which allows for Unicode support directly in the code. This choice has several benefits:

- Makes code more accessible to non-English speakers
- Enables domain experts to use notation from their fields directly in code
- Allows for more expressive and intuitive naming conventions
- Supports mathematical notation that closely resembles standard written forms

(b) Literate Programming and Mechdown

Literate programming, introduced by Donald Knuth, presents programs as structured documents where explanations take precedence over code. In Mech, we support this concept through a format called Mechdown, a superset of Markdown with extensions to support embedded Mech syntax. This document is formatted with Mechdown to demonstrate how it is used.

For more information, see the <a href="#58856088105263747">Mechdown Section</a>.

(c) Whitespace

Whitespace in Mech is used to separate tokens and is generally ignored. This includes spaces, tabs, and newlines. However, whitespace can be significant in certain contexts:

- In lists, whitespace is used to separate items.
- In matrix and table definitions, whitespace deliniates columns and rows.
- In formulas, whitespace is required around operators.

Semicolons and commas are treated as whitespace in most cases. Except in these contexts:

- Semicolons can be used to separate statements so they can be written inline.
- Semicolons can be used in a matrix to separate rows, so they can be written inline.

For more information, see the <a href="">Whitespace design document</a>.

4. Lexical Elements
-------------------------------------------------------------------------------

(a) Tokens

Tokens are the smallest units of meaning in Mech. They include letters, digits, punctuation, and special symbols.

Some Unicode characters are reserved for box drawing, and therefore are excluded from includsion in valid identifiers.

```ebnf
alpha := "a".."z" | "A".."Z" ;
digit := "0".."9";
emoji := +emoji-grapheme ;
word := +alpha ;
digit1 := +digit ;
digit0 := *digit ;
bin-digit := "0" | "1" ;
hex-digit := digit | "a" .. "f" | "A" .. "F" ;
oct-digit := "0" .. "7" ;
number := digit1 ;
forbidden-emoji := box-drawing | other-forbidden-shapes ;
emoji := (¬¨forbidden-emoji, emoji-grapheme) ;
```

(b) Identifiers

```ebnf
identifier := (alpha | emoji), *(alpha | digit | symbol | emoji) ;
```

Identifiers start with letters or most UTF-8 encoded emoji characters, and can contain alphanumeric, most emojis, /, \*, +, -, and ^ characters.

**Examples:**

  Hello-Word
  io/stdout
  Œîx^2
  ü§ñ
  A*

(c) Keywords

There are only two keywords in Mech:

```
true
false
```

Combined with Mech's Unicode support, this allows users to write code in their native language without the need to learn English keywords.

(c) Operators and Punctuation

**Punctutation:**
```
. ! ? , : ; ' "
```

**Symbols:**
```
& | @ / # = \ ~ + - * ^ _
```

**Grouping symbols:**
```
( ) < > { } [ ]
```

**Operators:**
```
Assign       := = += -= *= /= ^=
Arithmetic   + - * / ^ %
Split        >- -<
Matrix       ** ¬∑ ‚®Ø \ ' 
Logic        | & xor ‚äï ‚äª ! ¬¨
Set          ‚à™ ‚à© ‚àñ ‚àÅ ‚äÜ ‚äá ‚ää ‚äã ‚àà ‚àâ 
Range        .. ..=
Condition    != ¬¨= ‚â† == > < >= ‚â§ ‚â•
Transition   => -> ~>
Guard        | ‚îÇ ‚îú ‚îî
```

```ebnf
punctuation := period 
      | exclamation 
      | question 
      | comma 
      | colon 
      | semicolon 
      | quote 
      | apostrophe ;
symbol := ampersand 
      | bar 
      | at 
      | slash 
      | hashtag 
      | equal 
      | backslash 
      | tilde 
      | plus 
      | dash 
      | asterisk 
      | caret 
      | underscore ;
grouping-symbol := left-parenthesis 
      | right-parenthesis 
      | left-angle 
      | right-angle 
      | left-brace 
      | right-brace 
      | left-bracket 
      | right-bracket ;
escaped-char := backslash,  symbol | punctuation ;
text := alpha 
      | digit 
      | space 
      | tab 
      | escaped-char 
      | punctuation 
      | grouping-symbol 
      | symbol ;
space-tab := space | tab ;
list-separator := *whitespace, ",", *whitespace ;
```

(d) Comments

```ebnf
comment-sigil := "--" | "//" ;
comment :=  *whitespace
      , comment-sigil
      , +text ;
```

**Examples:**

  -- Single line comment.
  // Also a single line comment.

5. Literals
-------------------------------------------------------------------------------

```ebnf
literal := (number | string | atom | boolean | empty), ?kind-annotation ;
```

(a) Integers

```ebnf
number := real-number, ?"i" | ?("+", real-number, "i") ;
integer-literal := +digit;
decimal-literal := "0d", +digit ;
hexadecimal-literal := "0x", +hex-digit ;
octal-literal := "0o", +oct-digit ;
binary-literal := "0b", +bin-digit ;
```

An integer literal is a sequence of digits representing a whole number. Mech supports decimal, binary, octal, and hexadecimal integer literals, each distinguished by a unique prefix:

- Decimal: A sequence of digits without a prefix (e.g., 42, 123456).
- Binary: Prefixed with 0b, containing only 0 and 1 (e.g., 0b1010).
- Octal: Prefixed with 0o, containing digits 0-7 (e.g., 0o755).
- Hexadecimal: Prefixed with 0x, containing digits 0-9 and a-f or A-F (e.g., 0x1A3F).

**Examples:**

  42
  0b1010
  0o755
  0x1A3F

(b) Floats

```ebnf
scientific-literal :=  (float-literal | integer-literal)
      , ("e" | "E")
      , ?plus
      , ?dash
      , (float-literal | integer-literal) ;
rational-literal := integer-literal
      , slash
      , integer-literal ;
float-literal := ?"."
      , +digit
      , ?"."
      , *digit ;
```

**Examples:**

  3.14
  0.001
  2.5e10

(c) Strings

```ebnf
string := quote, *(¬¨quote, text), quote ;
```

**Examples:**

  "Hello, World!"
  "characters like \" and \\ are escaped with, \\ e.g. \\\""

(d) Boolean

```ebnf
boolean := true-literal | false-literal ;
true-literal := english-true-literal | true-symbol ;
false-literal := english-false-literal | false-symbol ;
true-symbol := "‚úì" ;
false-symbol := "‚úó" ;
english-true-literal := "true" ;
english-false-literal := "false" ;
```

**Examples:**

  true
  false
  ‚úó
  ‚úì

(e) Atoms

```ebnf
atom := "`", identifier ;
```

**Examples:**

  `A
  `MyAtom
  `MyAtom123
  `üê¶

(f) Empty

```ebnf
empty := +underscore ;
```

**Examples:**

  _

(g) Kinds


```ebnf
kind-annotation := "<", kind, ">" ;
kind := kind-fxn 
      | kind-empty 
      | kind-atom 
      | kind-tuple 
      | kind-scalar 
      | kind-bracket 
      | kind-map 
      | kind-brace ;
kind-empty := +"_" ;
kind-atom := "`", identifier ;
kind-map := "{"
      , kind
      , ":"
      , kind
      , "}" ;
kind-fxn := "("
      , ?[",", kind]
      , ")"
      , "="
      , "("
      , ?[",", kind]
      , ")" ;
kind-brace := "{"
      , [",", kind]
      , "}"
      , ?":"
      , ?[",", literal] ;
kind-bracket := "["
      , [",", kind]
      , "]"
      , ?":"
      , ?[",", literal] ;
kind-tuple := "("
      , [",", kind]
      , ")" ;
kind-scalar := identifier ;
```


6. Data Structures
-------------------------------------------------------------------------------

```ebnf
structure := empty-set 
      | empty-table 
      | table 
      | matrix 
      | tuple 
      | tuple-struct 
      | record 
      | map 
      | set ;
```

Data structures in Mech can be broadly classified into two categories: ordered collections that allow duplicated elements, and unordered collections that do now allow duplicated elements.

**Ordered elements, duplicates allowed**
    - Vector (Nx1)
    - Row Vector (1xN)
    - Matrix (N-D)
    - Tuple

**Unordered elements, no duplicates**
    - Record
    - Table
    - Set
    - Map

Each data structure has its own semantics, which will be described in this section.

(a) Matrix

```ebnf
matrix-column := *space-tab 
      , expression 
      , (*space-tab, ?("," | table-separator), *space-tab) ;
matrix-row := ?table-separator
      , *space-tab
      , +matrix-column
      , ?semicolon
      , ?new-line
      , ?(+box-drawing-char, new-line) ;
matrix := matrix-start
      , *(box-drawing-char | whitespace)
      , *matrix-row
      , *box-drawing-char
      , matrix-end ;
```

A matrix is a numbered sequence of elements of a single kind, arranged in rows and columns. The number of elements is called the length of the matrix and is never negative. The number of rows and columns is called the shape of the matrix. The shape is always a pair of non-negative integers. 

The shape is part of the matrix's kind; it must evaluate to a non-negative constant representable by a tuple of kind `(index,index)`. The shape of matrix `A` can be discovered using the built-in function `matrix/shape()`. The elements can be addressed by index indices `(1,1)` through `matrix/shape(A)`. 

Matrix kinds are always two-dimensional, so row vectors and column vectors are also represented as matrices with a single row or column, respectively.

**Examples:**

  -- 3x3 Matrix
  [1 2 3
   4 5 6
   7 8 9]

  -- 3x2 Matrix
  [1, 2; 3, 4; 5, 6]

  -- 1x3 Row Vector
  [1 2 3]

  -- 3x1 Column Vector
  [1
   2
   3]
  
  -- 4x1 Column Vector
  [1; 2; 3; 4]

Fancy matrix syntax is supported so that formatted output from the Mech REPL can be used as program source or input.

```
‚îè           ‚îì
‚îÉ 1   2   3 ‚îÉ
‚îÉ 4   5   6 ‚îÉ
‚îó           ‚îõ
```

The elements of a matrix are indexed in the following ways:

- **1D** - by their position in the matrix, starting from 1, in a column-major order starting at the top left corner of the matrix and proceeding down and to the right. The last element of the matrix, called the end of the matrix, is the most bottom right element.

- **2D** - by the row and column index, starting from 1 for each.

Negative indices indicate counting from the end of the matrix. For example, `-1` is the last element, `-2` is the second to last element, and so on.

(b) Set

```ebnf
set := "{"
      , *whitespace
      , ?[expression, list-separator]
      , *whitespace
      , "}" ;
empty-set := table-start
      , *whitespace
      , empty
      , *whitespace
      , table-end ;
```

**Examples:**

  {1, 2, 3}

(c) Map

```ebnf
map := "{", *whitespace, *mapping, *whitespace, "}" ;
mapping :=  *whitespace, expression, *whitespace, ":", *whitespace, expression, ?comma, *whitespace ;
```

(d) Tuple

```ebnf
tuple := "(", ?[expression, ","], ")" ;
tuple-struct := atom, "(", expression, ")" ;
```

**Examples:**

  ()                 
  (1)                
  (1,1,3)                
  (1,(2,3))                
  (1, true, "Hello")                 

(e) Table

```
table := table-start
      , *(box-drawing-char | whitespace)
      , table-header
      , *(box-drawing-char | whitespace)
      , +table-row
      , *box-drawing-char
      , *whitespace
      , table-end ;
binding := identifier
      , ?kind-annotation
      , colon
      , expression
      , ?"," ;
table-column := *(space | tab)
      , expression
      , *((space | tab)
            , ?("," | table-separator)
            , *(space | tab)) ;
table-row := ?table-separator
      , *(space | tab)
      , +table-column
      , ?semicolon
      , ?new-line
      , ?(+box-drawing-char, new-line) ;
table-header := list1(+space-tab, field)
      , *(space | tab)
      , (bar| box-vert)
      , *whitespace ;
field := identifier, ?kind-annotation ;
empty-table := table-start
      , *whitespace
      , table-end ;
```

**Examples:**

  { x<f32>  y<u8> | 
    1.2     9 
    1.3     8     }

(f) Record

```ebnf
record := table-start
      , *whitespace
      , +binding
      , *whitespace
      , table-end ;
```

**Examples:**

  { x: 1 y: "a", z: [1 2 3] }
  { x<u8>: 1, y<string>: "a", z<[u8]:3,1>: [1;2;3] }
  { a: {b: 1, c: "hi"}, b: [1;2;3] }

7. Expressions
-------------------------------------------------------------------------------

```ebnf
expression := range-expression | formula ;
```

(a) Formula 

```ebnf
parenthetical-term := left-parenthesis, formula, right-parenthesis ;
negate-factor := "-", factor ;
not-factor := "not", factor ;

formula := l1, *(range-operator, l1) ;
add-sub-operator := add | subtract ;
l1 := l2, *(add-sub-operator, l2) ;
mul-div-operator := multiply | divide ;
matrix-operator := matrix-multiply 
      | multiply 
      | divide 
      | matrix-solve ;
l2 := l3, *(mul-div-operator | matrix-operator, l3) ;
exponent-operator := exponent ;
l3 := l4, *(exponent-operator, l4) ;
logic-operator := and 
      | or 
      | xor ;
l4 := l5, *(logic-operator, l5) ;
comparison-operator := not-equal 
      | equal-to 
      | greater-than-equal 
      | greater-than 
      | less-than-equal 
      | less-than ;
l5 := factor, *(comparison-operator, factor) ;  
factor := (parenthetical-term 
      | structure 
      | fsm-pipe 
      | function-call 
      | literal 
      | slice 
      | var), ?transpose ;
```

(a) Arithmetic

```
+    add               integers, floats, complex values, strings
-    subtract          integers, floats, complex values
*    multiply          integers, floats, complex values
/    divide            integers, floats, complex values
^    exponent          integers, floats, complex values
%    remainder         integers
```

(b) Matrix

```
\              solve          
¬∑              dot product    
‚®Ø              cross product  
**             matrix multiply
'              transpose      
```

(c) Comparison

```
!= | ¬¨= | ‚â†    not equal       
==             equal                 
>              greater         
<              less            
>= | ‚â•         greater or equal
<= | ‚â§         less or equal   
```

(d) Logical

```
|              or
&              and
! | ¬¨          not
xor | ‚äï | ‚äª   exclusive or
```

(e) Set

```
‚à™       union
‚à©       intersection
‚àñ       difference
‚àÅ | '   complement
‚äÜ       subset
‚äá       superset
‚ää       proper subset
‚äã       proper superset
‚àà       element of
‚àâ       not element of
```

(f) Range

```
..=     range inclusive
..      range exclusive
```

8. Indexing
-------------------------------------------------------------------------------

```ebnf
subscript := swizzle-subscript 
      | dot-subscript-int 
      | dot-subscript 
      | bracket-subscript 
      | brace-subscript ; 
index := identifier, +subscript ;
```

(a) Slicing

```ebnf
bracket-subscript := "["
      , [(select-all | range-subscript | formula-subscript), ","]
      , "]" ;

brace-subscript := "{"
      , [(select-all | formula-subscript), ","]
      , "}" ;
formula-subscript := formula ;
range-subscript := range-expression ;
select-all := ":" ;
```

(b) Dot Index

```ebnf
dot-subscript := ".", identifier ;
dot-subscript-int := ".", integer-literal ;
```

(c) Swizzle

```ebnf
swizzle-subscript := "."
      , identifier
      , "," 
      , [identifier, ","] ;
```

9. Statements
-------------------------------------------------------------------------------

```ebnf
statement := variable-define 
      | variable-assign 
      | enum-define 
      | fsm-declare 
      | kind-define ;
```

(a) Variable Define

```ebnf
define-operator := ":=" ;
variable-define := ?tilde, var
      , ¬¨assign-operator
      , define-operator
      , expression ;
```

(b) Variable Assign

```ebnf
assign-operator := "=";
variable-assign := slice-ref
      , ¬¨define-operator
      , assign-operator
      , expression ;
```

(c) Op-Assign

```ebnf
add-assign-operator := "+=";
sub-assign-operator := "-=";
mul-assign-operator := "*=";
div-assign-operator := "/=";
exp-assign-operator := "^=";
op-assign-operator := add-assign-operator 
      | sub-assign-operator 
      | mul-assign-operator 
      | div-assign-operator 
      | exp-assign-operator ;
op-assign := slice-ref
      , ¬¨define-operator
      , op-assign-operator
      , expression ;
```

(c) Enum Define

```ebnf
enum-define := "<"
      , identifier, ">"
      , define-operator
      , [enum-variant, enum-separator];
enum-variant := ?grave
      , identifier
      , ?enum-variant-kind ;
enum-variant-kind := "("
      , kind-annotation
      , ")" ;
```

(d) Kind Define

```ebnf
kind-define := "<"
      , identifier
      , ">"
      , define-operator
      , kind-annotation ;
```

10. Functions
-------------------------------------------------------------------------------

(a) Function Define

```ebnf
function-define := identifier
      , "("
      , ?[function-arg,list-separator]
      , ")"
      , "="
      , (function-out-args | function-out-arg)
      , define-operator
      , [statement, (+whitespace | statement-separator)]
      , "." ;
function-out-args := "("
      , [function-arg, list-separator]
      ,")" ;      
function-out-arg := function-arg ;
function-arg := identifier, kind-annotation ;
argument-list := "(", ?[(call-arg-with-biding | call-arg), ","], ")" ;
```

(b) Function Call

```ebnf
function-call := identifier, argument-list ;
call-arg-with-binding := identifier
      , colon
      , expression ;
call-arg := expression ;
var := identifier, ?kind-annotation ;
```

11. State Machines
-------------------------------------------------------------------------------

```ebnf
fsm := "#"
      , identifier
      , ?argument-list
      , ?kind-annotation ;
```

(a) Operators

```ebnf
output-operator := "=>" ;
transition-operator := "->" ;
async-transition-operator := "~>" ;
guard-operator := "|" 
      | "‚îÇ" 
      | "‚îú" 
      | "‚îî" ;
```

(b) Specification

```ebnf
fsm-specification := "#"
      , identifier
      , "("
      , ?[var, ","]
      , ")"
      , ?output-operator
      , ?kind-annotation, define-operator, +fsm-state-definition, "." ;
fsm-tuple-struct := grave
      , identifier
      , "("
      , [fsm-pattern, ","]
      , ")" ;
fsm-state-definition := guard-operator
      , grave
      , identifier
      , ?fsm-state-definition-variables ;
fsm-state-definition-variables := "("
      , ?[var, list-separator]
      , ")" ;
fsm-pipe := fsm-instance, *(fsm-state-transition | fsm-async-transition | fsm-output) ;
fsm-declare := fsm
      , define-operator
      , fsm-pipe ;
fsm-instance := "#"
      , identifier
      , ?fsm-args ;
fsm-args := "("
      , ?[(call-arg-with-binding | call-arg), list-separator]
      , ")" ;
```

(c) Implementation

```ebnf
fsm-implementation := "#"
      , identifier
      , "("
      , ?[identifier, list-separator]
      , ")"
      , transition-operator
      , fsm-pattern
      , *whitespace
      , +fsm-arm
      , "." ;
fsm-arm := *comment
      , (fsm-transition | fsm-guard-arm)
      , *whitespace ;
fsm-guard-arm := *comment
      , fsm-pattern
      , +fsm-guard ;
fsm-guard := guard-operator
      , fsm-pattern
      , +(fsm-statement-transition | fsm-state-transition | fsm-output | fsm-async-transition | fsm-block-transition) ;
fsm-transition := *comment
      , fsm-pattern
      , +(fsm-statement-transition | fsm-state-transition | fsm-output | fsm-async-transition | fsm-block-transition) ;
fsm-state-transition := transition-operator, fsm-pattern ;
fsm-async-transition := async-transition-operator, fsm-pattern ;
fsm-statement-transition := transition-operator, statement ;
fsm-block-transition := transition-operator
      , left-brace
      , +mech-code
      , right-brace ;
fsm-output := output-operator, fsm-pattern ;
fsm-pattern := fsm-tuple-struct 
      | wildcard 
      | formula ;
wildcard := "*" ;
```

12. Mechdown
-------------------------------------------------------------------------------

(a) Markdown

```ebnf
title := +text
      , new-line
      , +"="
      , *(space|tab)
      , *whitespace ;
subtitle := +digit-token
      , "."
      , *space
      , +text
      , new-line
      , +"-"
      , *(space|tab)
      , new-line
      , *(space|tab)
      , *whitespace ;
number-subtitle := *(space|tab)
      , "("
      , integer-literal
      , ")"
      , +(space|tab)
      , +text
      , *(space|tab)
      , *whitespace ;
alpha-subtitle := *(space|tab)
      , "(", alpha, ")"
      , +(space|tab)
      , +text
      , *(space|tab)
      , *whitespace ;
paragraph-element := +(¬¨define-operator, text) ;
paragraph := paragraph-starter, *paragraph-element ;
unordered-list := +list-item, ?new-line, *whitespace ;
list-item := dash
      , +space
      , paragraph
      , *new-line ;
code-block := (grave, grave, grave), new-line, any, (grave, grave, grave), new-line, *whitespace ;
```

(b) Mech Extensions

```ebnf
mech-code := mech-code-alt, ("\n" | ";" | comment) ;
```

13. Mech Programs
-------------------------------------------------------------------------------

```ebnf
mech := program | statement ;
```

(a) Programs

```ebnf
program := ?title, body ;
body := +section ;
```

(b) Sections

```ebnf
section-element := mech-code 
      | unordered-list 
      | comment 
      | paragraph 
      | code-block 
      | sub-section ;
sub-section-element := comment 
      | unordered-list 
      | mech-code 
      | paragraph 
      | code-block;
sub-section := alpha-subtitle, *sub-section-element ;
section := ?ul-subtitle, +section-element ;
```