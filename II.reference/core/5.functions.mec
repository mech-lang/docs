Functions
===========

Functions in Mech provide a way to define reusable blocks of code that operate on input arguments and return results. They are idempotent, meaning they only operate on their input arguments and do not have access to any global tables. This design choice helps ensure that Mech programs are pure and avoid side effects.

Defining Functions
--------------------

The syntax for defining a Mech function follows a specific pattern, with an output list followed by the function name, input arguments, and function body. For example:

[x<f32>] = add-two(y<f32>)
  x = y + 2

This function defines one output table x of kind f32. The function name is add-two, and it takes one input argument y, also a 32-bit floating-point number. The function body adds 2 to the input argument y and assigns the result to the output variable x.

Calling Functions
-------------------

Functions can be called in Mech by passing in arguments and assigning the results to variables. For example:

  result = add-two(y: 5)

Here's an example of a function that uses the a function to calculate the distance between two points:

[d<f32>] = distance(p1<m>, p2<m>)
  dx = p1.x - p2.x
  dy = p1.y - p2.y
  d = math/sqrt(dx^2 + dy^2)

This function takes two input arguments p1 and p2, both of kind m, which represents a point in two-dimensional space. The function calculates the distance between the two points using the Pythagorean theorem and assigns the result to the output variable d.

Overloading Functions
-----------------------