1. Values
===========

Mech has a variety of data types that can be used in its programs. Here are some of the basic data types in Mech:

- *Numbers*: integer and floating-point numbers, as well as complex numbers.
- *Strings*: used for text.
- *Booleans*: used in logical operations, and logical indexing.
- *Tables*: vectors, matricies, structs, and other complex datatypes.

Number Literals
-----------------

Mech supports a variety of number literal formats:

- Decimal integers: `10`, `-42`, `0d123`
- Hexadecimal integers: `0x01234ABCDEF`, `0xabc123`
- Octal integers: `0o77`, `0o12345670`
- Binary integers: `0b1010`, `0b111111111010101`
- Floating point numbers: `3.14`, `-1.23`
- Scientific notation: `6.02e23`, `1.602E-19`
- Complex numbers: `2.5+2i`, `-1.2e-3+4.7i`

üìù Note: decimal numbers without a type specifier are represented using `f32`. An annotation can be appened to the literal to specify an alternative kind.

(1) Quantitites

Quantities are numbers with physical units. Here are a few that Mech supports:

  5<m>        -- 5.0 meters
  10.0<kg>    -- 10.0 kilograms
  -2.3<m/s^2> -- -2.3 meters per second squared

Arithmetic operations with quantities
  d1 = 5<m>
  d2 = 10<ft>
  total-distance = d1 + d2     -- 8.0484 meters

  m1 = 10<kg> + 5<lb>
  m2 = 
  total-mass = m1 + m2         -- 12.2676 kilograms

  a1 = 2<m/s^2>
  a2 = 4<mi/hour^2>
  total-acceleration = a1 + a2 -- 3.2367 meters per second squared

(2) Unit conversions

In addition to these basic number literals, Mech supports a variety of ways to perform arithmetic operations and conversions between different physical units. For example, you can add two numbers with physical units together, and Mech will automatically handle the unit conversions for you:

  d1 = 5<m>
  d2 = 10<ft>
  total-distance = d1 + d2   -- 8.0484 meters

‚öôÔ∏è Implementation Detail: currently, quantities are stored as `f32` by default.

(3) Number Representations

- Decimal integer literals are stored as `f32` by default.
- Decimal integer literals prefixed with `0d` are stored as `u128`.
- Hex, Oct, and Binary integer literals are also stored as `u128`.
- Floating point literals are stored as `f32` by default.
- Scientific notation literals are stored as `f32` by default.
- Complex numbers are stored as two `f32` components by default.

You can assign a kind to a value by appending the literal with a kind annotation:

  a = 123       -- 123 stored as an f32
  x = 123<u8>   -- 123 stored in an 8-bit unsigned integer
  y = -123<i8>  -- -123 stored as an 8-bit signed integer
  z = 456<u16>  -- 456 exceeds the maximum size for a u8, so it must be stored in a u16

Mech provides the following numeric kinds:

- Unsigned integers: u8, u16, u32, u64, u128
- Signed integers: i8, i16, i32, i64, i128
- Floating point (IEEE 754-2008): f32, f64

String Literals
----------------

Strings are a fundamental data type in Mech, used for representing sequences of characters. Strings can be multiline. The backslash (`\`) can be used to escape special characters in strings.

Here are some examples of Mech string literals:

  "hello, world!"      -- a simple string
  "multi
  line
  string"              -- a multiline string with line breaks
  "ü§ñüí°‚öôÔ∏èüåç‚ú®üíöüöÄ"   -- a string with emojis

Boolean Literals
-----------------

In Mech, boolean values are represented by the keywords true and false, or the Unicode characters ‚úì and ‚úó, respectively. These literals are used to represent a logical value, with true representing true or on, and false representing false or off.

Example usage:

  active = true
  has-permission = ‚úì
  valid? = false
  enabled? = ‚úó

üìù Note: boolean literals are case-sensitive and must be written in lowercase.

In addition to literals, boolean values can also be the result of boolean expressions or logical operations. Common boolean operators include and, or, and not. For example:

  x = 5
  y = 10
  greater? = x > y            -- false
  both = (x > 0) & (y > 0)    -- true
  either = (x > 0) | (y < 0)  -- true
  is-not = !(x > y)           -- true

Table Literals
----------------

A table consists of rows and columns, where each column represents a specific attribute of the data, and each row represents a specific instance of that data. Tables can be created using table literals, which are indicated by square bracked `[]` enclosing a list of values. Spaces and commas delinate columns, while semicolons and newlines delinate rows. Here are some examples of table literals in Mech:

  
  ["Alice", "Bob", "Charlie"]  -- 1x3 row vector of strings`
  [true; false; true]          -- 3x1 column vector of booleans, the delinates separates rows
  [1 2
   3 4]                        -- 2x2 matrix of numbers
  [1]                          -- 1x1 scalar table

(1) Named columns

By default, table rows and columns are referenced by their index. However, we can optionally add an index alias to a column to make them more readable.

  [|name   age height|
    "Yan"  20  100
    "Seth" 23  102]

(2) Column kinds

You can assign a kind to a column using a kind annotation, which is a kind identifier surrounded by angle brackets `<>`. For example:

  [|name<string>   age<u8> height<f32>|
    "Yan"          20      100
    "Seth"         23      102]

(3) Inline tables

This syntax is used when you want to create a table with only a single row.

  [name: "Yan" age: 20 height: 100]

You can also assign types to inline table fields:

  [name<string>: "Yan" age<u8>: 20 height<f32>: 100]

(4) Nested tables

Tables can be nested to create more complex data structures like trees and structs. A nested table is a table that has a reference to another table as one of its values.

  [type: "div", contains: "Hello World!", parameters: [width: 100 height: 50]]